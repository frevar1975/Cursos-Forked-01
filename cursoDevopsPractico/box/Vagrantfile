# -*- mode: ruby -*-
# vi: set ft=ruby :

# Copyright (C) 2020 Michael Joseph Walsh - All Rights Reserved
# You may use, distribute and modify this code under the
# terms of the the license.
#
# You should have received a copy of the license with
# this file. If not, please email <mjwalsh@nemonik.com>

$VERBOSE = nil

# This class uses VirtualBox and therefor expects Windows HyperV to be disabled.
if Vagrant::Util::Platform.windows? and Vagrant::Util::Platform.windows_hyperv_enabled?
  puts "Windows HyperV is expected to be disabled."
  exit(false)
end

# Vagrant will start at your current path and then move upward looking
# for a Vagrant file.  The following will provide the path for the found
# Vagrantfile, so you can execute `vagrant` commands on the command-line
# anywhere in the project a Vagrantfile doesn't already exist.
vagrantfilePath = ""
if File.dirname(__FILE__).end_with?('Vagrantfile')
   vagrantfilePath = File.dirname(File.dirname(__FILE__))
else
   vagrantfilePath = File.dirname(__FILE__)
end

# Used to hold all the configuration variable and convienance methods for accessing
require File.join(vagrantfilePath, '..', 'configuration_vars.rb')

# Colorize string printed to StandardOut
require File.join(vagrantfilePath, '..', 'string.rb')

box = ConfigurationVars::VARS[:base_box]
os = box.split('/')[1]
box = "nemonik/devops_#{os}"

# nfs does not appear to work reliably on OS X Catalina (See: https://github.com/hashicorp/vagrant/issues/11234)
if os.downcase.include? "alpine" and Vagrant::Util::Platform.platform.include? 'darwin'
  puts "ERROR: Alpine requires nfs to share a project synced_folder, but nfs does not appear to work reliably on OS X Catalina (See: https://github.com/hashicorp/vagrant/issues/11234)".red
  exit!
end

uninstall_plugins = %w( vagrant-cachier vagrant-alpine )
required_plugins = %w( vagrant-timezone vagrant-proxyconf vagrant-certificates vagrant-disksize vagrant-reload )

if (not os.downcase.include? 'alpine')
  required_plugins = required_plugins << "vagrant-vbguest"
else
  # as alpine is currently not supported by vagrant-vbguest
  uninstall_plugins = uninstall_plugins << "vagrant-vbguest"
end

# Uninstall the following plugins
plugin_uninstalled = false
uninstall_plugins.each do |plugin|
  if Vagrant.has_plugin?(plugin)
    system "vagrant plugin uninstall #{plugin}"
    plugin_uninstalled = true
  end
end

# Require the following plugins
plugin_installed = false
required_plugins.each do |plugin|
  unless Vagrant.has_plugin?(plugin)
    system "vagrant plugin install #{plugin}"
    plugin_installed = true
  end
end

# if plugins were installed, restart
if plugin_installed || plugin_uninstalled
  puts "restarting"
  exec "vagrant #{ARGV.join' '}"
end

Vagrant.configure("2") do |config|
  # Set proxy settings for all vagrants
  #
  # Depends on install of vagrant-proxyconf plugin.
  #
  # To use:
  #
  # 1.  Install `vagrant plugin install vagrant-proxyconf`
  # 2.  Set environmental variables for `http_proxy`, `https_proxy`, `ftp_proxy`, and `no_proxy`
  #
  #     For example:
  #
  #     ```
  #     export http_proxy=
  #     export https_proxy=
  #     export ftp_proxy=
  #     export no_proxy=
  #     ```
  if (ENV['http_proxy'] || ENV['https_proxy'])
    config.proxy.http = ENV['http_proxy']
    config.proxy.https = ENV['https_proxy']
    config.proxy.ftp = ENV['ftp_proxy']
    config.proxy.no_proxy = ENV['no_proxy']
    config.proxy.enabled = { docker: false }

    if ( ARGV.include? 'up' ) || ( ARGV.include? 'provision' )
      puts "INFO: HTTP Proxy variables set.".green
      puts "INFO: http_proxy = #{ config.proxy.http }".green
      puts "INFO: https_proxy = #{ config.proxy.https }".green
      puts "INFO: ftp_proxy = #{ config.proxy.ftp }".green
      puts "INFO: no_proxy = #{ config.proxy.no_proxy }".green
    end
  else
    if ( ARGV.include? 'up' ) || ( ARGV.include? 'provision' )
      puts "INFO: No http_proxy or https_proxy environment variables are set.".green
    end

    config.proxy.http = nil
    config.proxy.https = nil
    config.proxy.ftp = nil
    config.proxy.no_proxy = nil
    config.proxy.enabled = false
  end

  # To add Enterprise CA Certificates to all vagrants
  #
  # Depends on the install of the vagrant-certificates plugin
  #
  # To use:
  #
  # 1.  Install `vagrant plugin install vagrant-certificates`.
  # 2.  Set environement variable for `CA_CERTIFICATES` containing a comma separated list of certificate URLs.
  #
  #     For example:
  #
  #     ```
  #     export CA_CERTIFICATES=http://employeeshare.mitre.org/m/mjwalsh/transfer/MITRE%20BA%20ROOT.crt,http://employeeshare.mitre.org/m/mjwalsh/transfer/MITRE%20BA%20NPE%20CA-3%281%29.crt
  #     ```
  #
  #     The Root certificate *must* be denoted as the root certificat like so:
  #
  #     http://employeeshare.mitre.org/m/mjwalsh/transfer/MITRE%20BA%20ROOT.crt
  #

  if ENV['CA_CERTIFICATES']
    # Because @williambailey's vagrant-ca-certificates has an issue  https://github.com/williambailey/vagrant-ca-certificates/issues/34 I am using @Toilal fork, vagrant-certificates
    if ( ARGV.include? 'up' ) || ( ARGV.include? 'provision' )
      puts "INFO: CA Certificates set to #{ ENV['CA_CERTIFICATES'] }".green
    end

    config.certificates.enabled = true
    config.certificates.certs = ENV['CA_CERTIFICATES'].split(',')
  else
    if ( ARGV.include? 'up' ) || ( ARGV.include? 'provision' )
      puts "INFO: No CA_CERTIFICATES environment variable set.".green
    end
    config.certificates.certs = nil
    config.certificates.enabled = false
  end

  ansible_extra_vars_string = ConfigurationVars::as_string( config.proxy.http, config.proxy.https, config.proxy.ftp, config.proxy.no_proxy, config.certificates.certs )

  # keep insecure private key, because we're creating a vagrant box
  config.ssh.insert_key = false

  config.vm.box = ConfigurationVars::VARS[:base_box]
  config.vm.box_version = ConfigurationVars::VARS[:base_box_version]

  if (not os.downcase.include? 'alpine') 
    config.disksize.size = ConfigurationVars::VARS[:vagrant_root_drive_size]
  end

  # nfs does not appear to work reliably on OS X Catalina (See: https://github.com/hashicorp/vagrant/issues/11234)
  if Vagrant::Util::Platform.windows? 
    config.vm.synced_folder '..', '/vagrant', owner: 'vagrant', group: 'vagrant', mount_options: ['dmode=775,fmode=664']
  elsif Vagrant::Util::Platform.platform.include? 'darwin'
    projectPath=File.join('/System/Volumes/Data/Users/', ENV['USER'], vagrantfilePath.split(ENV['USER']).last, '..')

    config.vm.synced_folder projectPath, '/vagrant', owner: 'vagrant', group: 'vagrant', mount_options: ['dmode=775,fmode=664']
  else
    config.vm.synced_folder "..",  '/vagrant', type: 'nfs'
  end

  config.vm.network "private_network", ip: "#{ConfigurationVars::VARS[:network_prefix]}.9"

  config.vm.provider "virtualbox" do |virtualbox|
    virtualbox.customize ['modifyvm', :id, '--audio', 'none']
    virtualbox.customize ['modifyvm', :id, '--nic1', 'nat']
    virtualbox.customize ['modifyvm', :id, '--cableconnected1', 'on']
    virtualbox.customize ["modifyvm", :id, "--natdnshostresolver1", "on"]
    virtualbox.customize ["modifyvm", :id, "--natdnsproxy1", "on"]
    virtualbox.memory = 2048
    virtualbox.cpus = 2
  end

  determine_os = ConfigurationVars::DETERMINE_OS_TEMPLATE

  resize_root = ConfigurationVars::RESIZE_ROOT_TEMPLATE

  os_packages_from_cache = ConfigurationVars::OS_PACKAGES_FROM_CACHE_TEMPLATE
  os_packages_from_cache = os_packages_from_cache.gsub! /TYPE/, 'boxes'

  root_install_ansible_dependencies = ConfigurationVars::ROOT_INSTALL_ANSIBLE_DEPENDENCIES_TEMPLATE

  site_package_from_cache = ConfigurationVars::SITE_PACKAGES_FROM_CACHE_TEMPLATE
  site_package_from_cache = site_package_from_cache.gsub! /TYPE/, 'boxes'

  # run as root
  config.vm.provision "root_provisioning", type: :shell, inline: <<~SHELL
    #!/usr/bin/env bash

    #{determine_os}

    #{resize_root}

    #{os_packages_from_cache}

    #{root_install_ansible_dependencies}

    #{site_package_from_cache}

    case $os in

      "Alpine")
        apk add git
        ;;

      "Ubuntu-bionic")
        apt install -y git
        ;;

      "CentOS 7")
        yum install -y git
        ;;

      *)
        echo -n "${os} not supported."
        exit -1
        ;;
    esac
  SHELL

  user_cached_content = ConfigurationVars::USER_CACHED_CONTENT_TEMPLATE
  user_cached_content = user_cached_content.gsub! /TYPE/, 'boxes'

  user_install_ansible_dependencies = ConfigurationVars::USER_INSTALL_DEPENDENCIES_TEMPLATE

  install_ansible =  ConfigurationVars::INSTALL_ANSIBLE_TEMPLATE

  run_playbook_1 = ConfigurationVars::RUN_ANSIBLE_TEMPLATE.clone
  run_playbook_1 = run_playbook_1.gsub! /PLAYBOOK_PATH/, 'ansible/box-playbook-1.yml'
  run_playbook_1 = run_playbook_1.gsub! /INVENTORY_PATH/, '../hosts'
  run_playbook_1 = run_playbook_1.gsub! /ANSIBLE_EXTRA_VARS/, ansible_extra_vars_string
  run_playbook_1 = run_playbook_1.gsub! /LIMIT/, 'boxes'
  run_playbook_1 = run_playbook_1.gsub! /VAULT_PASS_PATH/, '../vault_pass'

  # run as vagrant user
  config.vm.provision "user_provisioning_1", type: :shell, privileged: false, inline: <<~SHELL
    #!/usr/bin/env bash

    #{determine_os}

    #{user_cached_content}

    # install Ansible locally vice using Vagrant ansible_local provisioner
    #{ConfigurationVars::VARS[:ansible_python_version]} -m pip install --user --upgrade pip
    /home/vagrant/.local/bin/pip install --user --upgrade setuptools
    /home/vagrant/.local/bin/pip install --user paramiko ansible==#{ConfigurationVars::VARS[:ansible_version]}

    #{install_ansible}

    echo Running playbook 1...

    cd /vagrant/box

    #{run_playbook_1}
  SHELL

  config.vm.provision :reload

  run_playbook_2 = ConfigurationVars::RUN_ANSIBLE_TEMPLATE.clone
  run_playbook_2 = run_playbook_2.gsub! /PLAYBOOK_PATH/, 'ansible/box-playbook-2.yml'
  run_playbook_2 = run_playbook_2.gsub! /INVENTORY_PATH/, '../hosts'
  run_playbook_2 = run_playbook_2.gsub! /ANSIBLE_EXTRA_VARS/, ansible_extra_vars_string
  run_playbook_2 = run_playbook_2.gsub! /LIMIT/, 'boxes'
  run_playbook_2 = run_playbook_2.gsub! /VAULT_PASS_PATH/, '../vault_pass'

  config.vm.provision "user_provisioning_2", type: :shell, privileged: false, inline: <<~SHELL
    #!/usr/bin/env bash

    #{determine_os}

    echo "Running playbook 2..."
    cd /vagrant/box

    #{run_playbook_2}
  SHELL

  # run as root to clean up
  config.vm.provision "clean_up", type: :shell,inline: <<~SHELL
    #!/usr/bin/env bash

    box="#{ConfigurationVars::VARS[:base_box]}"

    case $box in

      nemonik/alpine310 | generic/alpine310)
        rm -Rf /var/cache/apk/*
        ;;

      ubuntu/bionic64)
        echo "do nothing..."
        ;;

      centos/7 | generic/centos7)
        yum clean all
        yum clean metadata 
        yum clean dbcache
        yum makecache
        ;;

      *)
        echo -n "unkown base box"
        exit -1
        ;;
    esac

    rm -Rf /tmp/*
    dd if=/dev/zero of=/EMPTY bs=1M
    rm -f /EMPTY
    cat /dev/null > ~/.bash_history
    history -c
    sync
  SHELL
end
